/**
     * Object that checks if the word entered is a valid English word by checking the dictionary text file
     * as well as recursively finding the word in the board.
     * 
     * @param guess -> the guessed word the user makes (string)
     * @param board --> the current boggle board (String 1D array)
     * @param startLetterDictionray --> the position of each letter (int array)
     * @param dictionary --> holds the dictionary text file (String array)
     * @param minLength --> the minimum length of words
     * @return validate --> returns if the word is valid in the dictionary and the board
     */
public class validateWord {
    
    private String word;
    private String board [];
    private int startLetterDictionary [];
    private String dictionary [];
    private int minLength;
    private int posLetters [];
    
    
    public validateWord(String word, String board [], int startLetterDictionary [], String dictionary [], int minLength){
        this.word = word;
        this.board = board;
        this.startLetterDictionary= startLetterDictionary;
        this.dictionary = dictionary;
        this.minLength = minLength;
        posLetters = new int [this.word.length()];
    }
    
    //returns if the word is a valid english word in the dictionary text file and if it is a long enough word
    public boolean validateDicLen (){
        int startLetter = word.charAt(0) - 'A';
        if (word.length() < minLength) return false;
        return recursivelyValidateWord(dictionary, word, startLetterDictionary[startLetter], startLetterDictionary[startLetter+1]);
    }
    
    //recursive program that returns if the word is found in the dictionary or not
    public boolean recursivelyValidateWord (String [] dictionary, String target, int Min, int Max){
        int middle  = (Min + Max) / 2;
        if (Max < Min) return false;
        if (dictionary[middle].equals(target)){ 
            return true;
        }
        else if (dictionary[middle].compareTo(target) > 0)
            return recursivelyValidateWord(dictionary, target, Min, middle-1);
        else 
            return recursivelyValidateWord(dictionary, target, middle+1, Max);
    }
    
    
    int totalLetters = 0;
    //recursively validates if the word is on the board and also returns the position in the board array of the letters
    public int [] validateBoard(){
        posLetters[word.length()-1] = -1;
        
        for (int i = 0; i < 25; i++){
            if (board[i].equals(word.substring(0,1)) ){
                if (recursiveBoard(i)){
                    System.out.println("gay");
                }
                else System.out.println("smeason is gay");
            }
        }
        return posLetters;
    }
    
    public boolean recursiveBoard (int i){
        if (posLetters[word.length()-1] != -1){
            return true;
        }
        if (i-6 >= 0 && i % 5 != 0 && board[i].charAt(0) == word.charAt(totalLetters)){
            posLetters[totalLetters]=i;
            totalLetters++;
            return recursiveBoard(i-6);
        }
        else if (i-5 >= 0 && board[i].charAt(0) == word.charAt(totalLetters)){
            posLetters[totalLetters]=i;
            totalLetters++;
            return recursiveBoard(i-5);
        }
        else if (i-4 >= 0 && (i + 1) % 5 != 0  && board[i].charAt(0) == word.charAt(totalLetters)){
            posLetters[totalLetters]=i;
            totalLetters++;
            return recursiveBoard(i-4);
        }
        else if (i-1 >= 0 && i % 5 != 0 && board[i].charAt(0) == word.charAt(totalLetters)){
            posLetters[totalLetters]=i;
            totalLetters++;
            return recursiveBoard(i-1);
        }
        else if (i+1 <= 24 && (i + 1) % 5 != 0 && board[i].charAt(0) == word.charAt(totalLetters)){
            posLetters[totalLetters]=i;
            totalLetters++;
            return recursiveBoard(i+1);
        }
        else if (i+4 <= 24 && i % 5 != 0 && board[i].charAt(0) == word.charAt(totalLetters)){
            posLetters[totalLetters]=i;
            totalLetters++;
            return recursiveBoard(i+4);
        }
        else if (i+5 <= 24 && board[i].charAt(0) == word.charAt(totalLetters)){
            posLetters[totalLetters]=i;
            totalLetters++;
            return recursiveBoard(i+5);
        }
        else if (i+6 <= 24 && (i+1) % 5 != 0 && board[i].charAt(0) == word.charAt(totalLetters)){
            posLetters[totalLetters]=i;
            totalLetters++;
            return recursiveBoard(i+6);
        }
        return false;
    }
    
    
}
